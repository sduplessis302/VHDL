LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.all;
USE IEEE.NUMERIC_STD.ALL;
USE  IEEE.STD_LOGIC_ARITH.all;
USE  IEEE.STD_LOGIC_UNSIGNED.all;

entity scoreKeep is 
	port(
	Clock				: in std_logic;
	pipeX				: in std_logic_vector(10 downto 0);
	ballX				: in std_logic_vector(9 downto 0); 
	scoreOUT 		: out std_logic_vector(15 downto 0)
	);
end entity;

architecture behaviour of scoreKeep is 
	signal Count : std_logic_vector(3 downto 0);
	signal Toggle: std_logic;
begin 
process(Clock, pipeX, ballX)
	begin 
		if (Init = '0') then -- active low button two to reset value(change when game FSM is made)
			Count <= "0000000000000000";
			Toggle <= '0';
		elsif (rising_edge(Clock)) then 
			if (Toggle = '0' and pipeX > ballX) then 
				Count <= Count + 1;
				Toggle <= '1';
			else 
				if (pipeX > ballX + 20) then 
					Toggle <= '0';
				end if;
			end if;
		end if;
		scoreOUT <= Count;
end process;
end behaviour;